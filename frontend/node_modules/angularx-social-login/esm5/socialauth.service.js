import { __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { ReplaySubject } from 'rxjs';
/** @dynamic */
var SocialAuthService = /** @class */ (function () {
    function SocialAuthService(config) {
        var _this = this;
        this.providers = new Map();
        this.autoLogin = false;
        this._user = null;
        this._authState = new ReplaySubject(1);
        this.initialized = false;
        if (config instanceof Promise) {
            config.then(function (config) {
                _this.initialize(config);
            });
        }
        else {
            this.initialize(config);
        }
    }
    SocialAuthService_1 = SocialAuthService;
    Object.defineProperty(SocialAuthService.prototype, "authState", {
        get: function () {
            return this._authState.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    SocialAuthService.prototype.initialize = function (config) {
        var _this = this;
        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;
        config.providers.forEach(function (item) {
            _this.providers.set(item.id, item.provider);
        });
        Promise.all(Array.from(this.providers.values()).map(function (provider) {
            return provider.initialize();
        }))
            .then(function () {
            _this.initialized = true;
            _this.providers.forEach(function (provider, key) {
                if (_this.autoLogin) {
                    provider
                        .getLoginStatus()
                        .then(function (user) {
                        user.provider = key;
                        _this._user = user;
                        _this._authState.next(user);
                    })
                        .catch(console.debug);
                }
            });
        })
            .catch(console.error);
    };
    SocialAuthService.prototype.signIn = function (providerId, signInOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this.initialized) {
                reject(SocialAuthService_1.ERR_NOT_INITIALIZED);
            }
            else {
                var providerObject = _this.providers.get(providerId);
                if (providerObject) {
                    providerObject
                        .signIn(signInOptions)
                        .then(function (user) {
                        user.provider = providerId;
                        resolve(user);
                        _this._user = user;
                        _this._authState.next(user);
                    })
                        .catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    reject(SocialAuthService_1.ERR_LOGIN_PROVIDER_NOT_FOUND);
                }
            }
        });
    };
    SocialAuthService.prototype.signOut = function (revoke) {
        var _this = this;
        if (revoke === void 0) { revoke = false; }
        return new Promise(function (resolve, reject) {
            if (!_this.initialized) {
                reject(SocialAuthService_1.ERR_NOT_INITIALIZED);
            }
            else if (!_this._user) {
                reject(SocialAuthService_1.ERR_NOT_LOGGED_IN);
            }
            else {
                var providerId = _this._user.provider;
                var providerObject = _this.providers.get(providerId);
                if (providerObject) {
                    providerObject
                        .signOut(revoke)
                        .then(function () {
                        resolve();
                        _this._user = null;
                        _this._authState.next(null);
                    })
                        .catch(function (err) {
                        reject(err);
                    });
                }
                else {
                    reject(SocialAuthService_1.ERR_LOGIN_PROVIDER_NOT_FOUND);
                }
            }
        });
    };
    var SocialAuthService_1;
    SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
    SocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';
    SocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet';
    SocialAuthService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['SocialAuthServiceConfig',] }] }
    ]; };
    SocialAuthService = SocialAuthService_1 = __decorate([
        Injectable(),
        __param(0, Inject('SocialAuthServiceConfig'))
    ], SocialAuthService);
    return SocialAuthService;
}());
export { SocialAuthService };
//# sourceMappingURL=data:application/json;base64,